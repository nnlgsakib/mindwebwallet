import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import QRCode from 'qrcode.react';
import Web3 from 'web3';

function EthereumWallet() {
  const [address, setAddress] = useState('');
  const [balance, setBalance] = useState('');
  const [qrValue, setQrValue] = useState('');
  const [amount, setAmount] = useState(0);
  const [recipient, setRecipient] = useState('');
  const [transactionHash, setTransactionHash] = useState('');

  useEffect(() => {
    // Connect to your own Ethereum JSON-RPC provider
    const provider = new ethers.providers.JsonRpcProvider("https://rpc-msc.mindchain.info/");

    // Generate a new random wallet if one does not already exist in local storage
    let wallet = JSON.parse(localStorage.getItem('wallet'));
    if (!wallet) {
      wallet = ethers.Wallet.createRandom();
      localStorage.setItem('wallet', JSON.stringify(wallet));
    }

    setAddress(wallet.address);

    // Get the balance of the wallet's address
    provider.getBalance(wallet.address).then(balance => {
      setBalance(Web3.utils.fromWei(balance.toString()));
    });
  }, []);

  const handleSend = async () => {
    try {
      const provider = new ethers.providers.JsonRpcProvider("https://rpc-msc.mindchain.info/");
      const wallet = ethers.Wallet.fromEncryptedJsonSync(
        localStorage.getItem('wallet'),
        process.env.REACT_APP_WALLET_PASSWORD
      );

      // Check if the recipient address is valid
      if (!ethers.utils.isAddress(recipient)) {
        alert('Invalid recipient address');
        return;
      }

      // Check if the amount is a valid number
      if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
        alert('Invalid amount');
        return;
      }

      // Calculate the gas limit and gas price for the transaction
      const gasLimit = 21000;
      const gasPrice = await provider.getGasPrice();

      // Send the transaction
      const transaction = await wallet.sendTransaction({
        to: recipient,
        value: ethers.utils.parseEther(amount),
        gasLimit,
        gasPrice
      });

      setTransactionHash(transaction.hash);
    } catch (error) {
      alert(error.message);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(address);
  };

  const handleQrValue = () => {
    setQrValue(address);
  };

  return (
    <div>
      <h1>Ethereum Wallet</h1>
      <p>Address: {address}</p>
      <button onClick={handleCopy}>Copy Address</button>
      <br />
      <QRCode value={qrValue} size={128} />
      <br />
      <button onClick={handleQrValue}>Generate QR Code</button>
      <br />
      <p>Balance: {balance} ETH</p>
      <input
        type="text"
        placeholder="Recipient Address"
        value={recipient}
        onChange={event => setRecipient(event.target.value)}
      />
      <input
        type="number"
        placeholder="Amount (ETH)"
        value={amount}
        onChange={event => setAmount(event.target.value)}
      />
      <button onClick={handleSend}>Send</button>
      <br />
      {transactionHash && <p>Transaction Hash: {transactionHash}</p>}
    </div>
  );
}

export default EthereumWallet;
